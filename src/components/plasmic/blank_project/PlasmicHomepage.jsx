// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h1S53gDFAwan5k4kyk1C1D
// Component: 7K9A4cMd4q
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button1 from "../../Button1"; // plasmic-import: YPyPVZa-z6/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: h1S53gDFAwan5k4kyk1C1D/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7K9A4cMd4q/css
import gifPixelGanggifOle56TpXo from "./images/gifPixelGanggif.gif"; // plasmic-import: OLE56TPXo/picture
import heroSocialpngWiguzEy27 from "./images/heroSocialpng.png"; // plasmic-import: WIGUZEy27/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"frame155"}
            data-plasmic-override={overrides.frame155}
            className={classNames(defaultcss.all, sty.frame155)}
          >
            <div
              data-plasmic-name={"background1"}
              data-plasmic-override={overrides.background1}
              className={classNames(defaultcss.all, sty.background1)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__fooQw
                )}
              >
                {"A Cardano-only spin-off of the Pixel Game NFT"}
              </div>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mhBrU)}
                displayHeight={"205px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: gifPixelGanggifOle56TpXo,
                  fullWidth: 400,
                  fullHeight: 400,
                  aspectRatio: undefined
                }}
              />

              <Button1
                data-plasmic-name={"button1"}
                data-plasmic-override={overrides.button1}
                className={classNames("__wab_instance", sty.button1)}
              />
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__aQSR
              )}
            >
              {"Chilled Pixel Gang"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__i3KHn
              )}
            >
              {
                "A collection of 2999 chilled pixel gang members. A spin-off of the Pixel Games NFT only available in Cardano."
              }
            </div>
          </div>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__fi4Eh)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"431px"}
            displayMinWidth={"0"}
            displayWidth={"991px"}
            loading={"lazy"}
            src={{
              src: heroSocialpngWiguzEy27,
              fullWidth: 1205,
              fullHeight: 503,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame155", "background1", "button1"],
  frame155: ["frame155", "background1", "button1"],
  background1: ["background1", "button1"],
  button1: ["button1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame155: makeNodeComponent("frame155"),
    background1: makeNodeComponent("background1"),
    button1: makeNodeComponent("button1"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
